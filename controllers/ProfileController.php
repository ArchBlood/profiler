<?php


namespace humhub\modules\profiler\controllers;


use humhub\modules\profiler\models\ProfilerResult;
use PHP_Timer;
use Yii;
use yii\console\Controller;
use yii\helpers\Console;

abstract class ProfileController extends Controller
{
    public $count = 500;

    public $title;

    public function init()
    {
        parent::init();
        require Yii::getAlias('@profiler/vendor/autoload.php');
    }

    public function options($actionID)
    {
        return array_merge(parent::options($actionID), [
            'count',
            'title'
        ]);
    }

    public function beforeAction($action)
    {
        /*try {
            $test = Yii::$app->getDb()->createCommand('SHOW VARIABLES LIKE \'query_cache_size\';')->queryOne();
            if($test['Value'] != 0) {
                $this->stdout("query_cache_size not 0\n", Console::FG_RED);
            }
        } catch (\Throwable $e) {}*/

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @param $profiler
     * @param null $count
     * @return ProfilerResult
     */
    public function runProfiler($profiler, $title)
    {
        $this->startProfiling();

        $result = new ProfilerResult(['title' => $title]);

        for($i = 0; $i < $this->count;$i++) {
            call_user_func($profiler, $result, $i);
        }

        $result->timeTotal = $this->endProfiling();

        return $result;
    }

    public function startProfiling()
    {
        PHP_Timer::start();
    }

    public function endProfiling()
    {
        return PHP_Timer::stop();
    }

    public function printResult(ProfilerResult $result)
    {
        $this->printResultHeadline();

        if($result->totalCount && $result->totalCountTitle) {
            $this->printResultRow($result->totalCountTitle, $result->totalCount, false);
        }

        $this->printTotalRunCount($result);
        $this->printResultRowPerRun($result);
        $this->printTotalTimeRow($result);
        $this->printAvarageTimeRow($result);
        $this->stdout("\n");
        $this->printResourceUsage($result);
        $this->cli_beep();
    }

    protected function cli_beep() {
        fprintf( STDOUT, "%s", "\x07");
    }

    protected function printTotalRunCount(ProfilerResult $result)
    {
        $this->printResultRow('Total runs', $this->count, false);
    }

    protected function printTotalTimeRow(ProfilerResult $result)
    {
        $this->printResultRow('Total run time', $result->timeTotal);
    }

    protected function printAvarageTimeRow(ProfilerResult $result)
    {
        $timeAvg = $result->timeTotal / $this->count;
        $this->printResultRow('Average run time', $timeAvg);
    }

    protected function printResultRowPerRun(ProfilerResult $result)
    {
        return $this->printResultRow('Result count per run', $result->getResultCount(), false);
    }

    protected function printResourceUsage(ProfilerResult $result)
    {
        $load = sys_getloadavg();
        $this->printResultRow('load % (1m)', $load[0] * 100, false);
        $this->printResultRow('load % (5m)', $load[1] * 100, false);
        $this->printResultRow('load % (15m)', $load[2] * 100, false);
        $this->stdout(PHP_Timer::resourceUsage()."\n", Console::FG_GREEN);

    }

    protected function printResultHeadline()
    {
        $this->stdout("---------------------------------------------------------------\n", Console::FG_GREEN);
        $this->stdout($this->title."\n", Console::FG_GREEN);
        $this->stdout("---------------------------------------------------------------\n", Console::FG_GREEN);
    }

    protected function printResultRow($title, $value, $float = true, $color = Console::FG_GREEN)
    {
        $format =  "%-50.50s|";
        $format .= $float ? "%3f" : "%u";
        $format .= " \n";
        $this->stdout(sprintf($format, $title,$value), $color);
    }
}